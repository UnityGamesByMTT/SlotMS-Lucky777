using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.U2D;
using UnityEngine.UI.Extensions;
using Random = UnityEngine.Random;

public class PayoutCalculation : MonoBehaviour
{
    [SerializeField]
    private int x_Distance;
    [SerializeField]
    private int y_Distance;

    [SerializeField]
    private Transform LineContainer;
    [SerializeField]
    private GameObject Line_Prefab;
    [SerializeField]
    private float pathTraceSpeed;

    [SerializeField]
    private Vector2 InitialLinePosition = new Vector2(-315, 100);

    [SerializeField]
    List<int> testPoints = new List<int>(3);
    GameObject TempObj = null;
    bool continueLinePath;
    List<Coroutine> linePath = new List<Coroutine>();
    public SlotBehaviour slotmanager;

    //generate lines at runtime accordingly
    internal void generateLinesAnim(List<int> y_index,List<string> points_AnimString)
    {
        if (slotmanager.IsTurboOn)
        {
            pathTraceSpeed = 20;
        }
        else
        {
            pathTraceSpeed = 13;
        }
        GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);
        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();
        linePath.Add(StartCoroutine(linePathTrace(y_index, MyLine)));
        
    }

  
    IEnumerator linePathTrace(List<int> linePosList,UILineRenderer myLine)
    {
        Color col = new Color(Random.Range(255f, 210f), Random.Range(255f, 210f), Random.Range(255f, 210f), 1f);
        myLine.color = col;
        Vector2 points = new Vector2(0 * x_Distance, linePosList[0] * -y_Distance);
        List<Vector2> tempList = new List<Vector2>();
        for (int i = 0; i < linePosList.Count; i++)
        {
            tempList.Add(points);
        }

        myLine.Points = tempList.ToArray();
        myLine.SetAllDirty();

        for (int i = 0; i < linePosList.Count; i++)
        {
            points = new Vector2(i * x_Distance, linePosList[i] * -y_Distance);
            while (Vector2.Distance(myLine.Points[i], points) > 0.1f)
            {
                myLine.Points[i] = Vector2.Lerp(myLine.Points[i], points, pathTraceSpeed * Time.deltaTime);
                myLine.SetAllDirty();
                yield return null;
            }
            for (int j = 0; j < linePosList.Count; j++)
            {
                if(j > i)
                {
                    myLine.Points[j] = points;
                }
            }  
        }
        slotmanager.LinesAnimDone = true;
        
    }

    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        if(TempObj!=null)
        {
            Destroy(TempObj);
            TempObj = null;
        }
    }

    //delete all lines
    internal void ResetLines()
    {
        slotmanager.LinesAnimDone = true;
        slotmanager.skipImageAnimation = true;
        for (int i = 0; i < linePath.Count; i++)
        {
            StopCoroutine(linePath[i]);
        }
        foreach (Transform child in LineContainer)
        {
            Destroy(child.gameObject);
        }
        slotmanager.StopGameAnimation();
    }
}
